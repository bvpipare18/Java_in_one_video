1.  Everything in Java must be written inside class, i.e. it's a strict OOP.

2.  In Java, Execution starts from main() method.

3.  void - returns nothing
    print() - method

4.  Source File ---> Compiler ---> Byte Code

5.  To Run Byte Code we need Platform that is JVM(Java Virtual Machine).

6.  Java is Platform Indpendent.

7.  Primitive Data Types - Summary

    DataType    Keyword   Size(bit) Size(byte)     Min          Max

    character   char        16          2           0           65535
    byte        byte        8           1           -128        127
    short       short       16          2           -32768      32767
    integer     int         32          4           -2e31       -2e31-1
    float       float       32          4           1.4e-45     3.4e+38
    long        long        64          8           -2e63       -2e63-1
    double      double      64          8           4.9e-324    1.8e+368
    boolean     boolean     NA          NA          false       true

8.  For E.g.
    int i = 5:
    int --> DataType
    i --> Variable
    5 --> Value

    VALID --> int i = 5, float f =5, double = 5
    INVALID --> int i = 5.5

9.  Java is strict OOP it means Every variable must be declare by some DataType.

10. Working with Java Fundamentals
    - Java Variables

11. You can name variable as you like.
    No special Charachters other than '$ _'.
    VALID --> abc, $abc, _abc, ab4c, abc$d
    INVALID --> 3abc
        
12. Once you define the variable Value you can change.
    int num = 500000000;
        IS EQUALS To
    int number = 50_00_00_000;

13. double i = 5.5; 
        is a VALID to use it as we must deine variable 
    like thisðŸ‘‡ðŸ‘‡
    float i = 5.5f;

14. To assign small values like 5 we must use 'short' DataType instead of 'int'.

15. To use only single value we can also use
    byte b = 5;

16. To use value bigger than 10 digits we must use 'long' and while dealing with 
    these we must also specify 'l' at the end of the number.
        long big_value = 5l;

17. Implicit conversion --> double d1 = 5;
    Typecasting --> int k = (int) 5.6;

18. Image added.

19. Naming Convention in Java.

    -   Variable Name - sname,stockprice
    -   Class Name - String, Integer, Student, Worker, Engineer
    -   Interface Name - Runable, Serializable

    -   Interface --> Adjective
            e.g. Runable, Readable, Remote
            - 'able' can be at end of the year.

    -   Class --> Noun
            e.g. Student, Person, Computer, HashMap
    
    ðŸ‘†ðŸ‘† for both Interface & Class Names we should always prefer first letter
        as Capital.

    -   Method --> Verb
            e.g. actiomPerformed, run, print, write

    -   Variable
            e.g. stockprice, bankdetails

    -   Constant
            e.g. PI, DENSITY, MAX_PRICE

    -   CAMEL CASING RULE
            e.g. MyFirstJavaClass, CheatSheet

    Variable    Constant   Constructor      Method     Interface

    abc         ABC         Abc()           abc()      Stretchable

20. Arithmetic Operators in Java

        Arithmetic --> +,-,*,/,%
        
21. If-Else Selection Statements
    -   When you have more than 1 statement after 'if' then you must specify
        inside a 'curly braces{}'.

22. Ternary & Switch Operator
    -   ternary Operator
        ?: --> condition?exp1:exp2
        
        if condition is true execute exp1 otherwise exp2
            OR/Equals to
        if (condition) {
            exp1
        } else {
            exp2
        }

23. Fundamentals of Java
    Selection Statement: Switch Statement
    -   You can use DataType 'int,String & char' in switch case.
        Syntax:
        switch(variable_name){
            case 1:
                break;
            case 2:
                break;

            case n:
                break;
            default:            
        }

24. While & For iteration Statements
    -   Most of the loops will have 3 points we must remember
        Initialzation,Condition,Incremeny/Decrement

    -   while --> Executing for particular time & then stopping.
    -   do while --> Executes at leat Once.
    -   for --> If you know the starting & endpoint.
    -   for-each also called enhanced for loop --> Made for arrays & collection.

25. Loops Assignment
    -   1
        1 2
        1 2 3
        1 2 3 4
        1 2 3 4 5
        1 2 3 4 5 6

    -   A
        A B
        A B C

    -   * * * *
        *     *
        *     *
        * * * *

26. Break & continue
    -   continue --> It will skip the current iteration and it will execute other
                    iterations of loop.

    -   break --> It will break at that points & will come out of that loop.

27. Class & Objects
    -   Java follows OOPS concept viz is Classes & Objects.
    -   For e.g. To Construct a building we must have blueprint of building.
    -   Building is an 'Object' to build any object JVM needs a Structure/Blueprint 
        that blueprint is a 'Class'.
    
    -   What is Class?
        Class defines the structure of an object and working of an object.

        Class Structure
                    class Building{
                        int floors;
                        public static provideAcc(){

                        }
                    }

        Object -
            Phone --> 
                    Knows Something - Variable - structure of phone --> color,logo
                    Does Something - Method - behavior of object

    -   To create a object of class 
            We use 'new' Keyword to create object & it is responsible for 
            allocating memory.
                for e.g. 
                    Calculator obj = new Calculator();
                    /*
                    Calculator - DataType
                    obj - Reference variable
                    new Calculator() - Object
                    Calculator() - Constructor
                    */

    -   Whenever if you want to use variable or method of other class in main 
        method we must always use object reference to access it.

28. Constructor in Java
    class A{
        int i;// 4 bytes, Default value = 0
        float f; // 4 bytes, default value = 0.0

        public A(){ // Constructor

        }
    }
    public static void main(String[] args) {
        A obj = new A(); //Object creation
    }

    -   When do we use Constructor???
            Whenever we want to create object of a class.

    -   Execution of code always starts from main() method.
        public static void main(String[] args) {
        
        }
        main(String[] args) - It takes string array as a parameter.
        void - it will return nothing

        To call any method in java we require object.

        Que - What is Deadlock????
        Ans - You can not call main() without object and You can not create 
        object without main().
        Solution - Specify main method as a 'static'.

        make it as 'public'

    -   Object will take some space in HEAP Memory.

    28.1 Information on Constructor

    -   Constructor is Member method.
    -   Constructor will have same name as class name.
    -   Every class will have constructor,Even if you don't mention.
    -   Constructor will Never Return Anything that the reason we don't
        mentioned Anything in a return type and we'll mention 'public'
        Access Modifier.
    -   Constructor will be used to allocate memory for Object.
    -   As soon as you create a object it will call constructor automatically.
    -   Default constructor
            public ClassName(){

            }

    -   What is Constructor Overloading???
            Class having Multiple constructors with different parameters.

    -   Multiple Constructors
        class A{
            int i;
            float f; 

            public A(){ // Default Constructor

            }
            public A(int k){ //Constructor with 1 parameter

            }
            public A(int k,float j){ //Constructor with 2 parameter

            }
        }

    -   Object Creation
        public static void main(String[] args) {
            A obj = new A();
            A obj = new A(6);
            A obj = new A(6,3.5f);
        }


29. Constructor Example
    -   If we don't have constructor in class then while creating object of class
        it will allocate some memory.

30. this keyword
    -   When do we use 'this' keyword???
            Whenever the instance variable & local variable is same.

    -   Local varibale always shadows/dominates instance variable.
    -   To solve this problem we must use 'this' keyword.
        instance    Local
        this.num1 = num1;
        this.num2 = num2;

            OR/Equals
            
    -   Use different name for local varibles & instance variable.
        instance    Local
          num1   =   number1;
          num2   =   number2;
        