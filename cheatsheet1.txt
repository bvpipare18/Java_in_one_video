53. Packages
    -   There are thousands of inbuilt classes.
    -   There are third party classes as well like JDBC,servlets.

    -   All these classes are present in different categories of Package.
        -   .io package --> BufferedInputSystem,File,PrintWriter
        -   .net package --> Socket,URL,ServerSocket
        -   .sql package --> ResultSet(Interface),DriverManager,TimeStamp

    -   Package name should be mirror of Domain name
        -   Domain Name --> google.com
        -   Package Name --> com.google

    -   com --> Telusko --> Test --> 4 class files
        -   In order to acces all 4 class files 
            com.Telusko.Test.*;
    
    -   To java files having same class name can be present in two different Package.

54. Access Modifiers
    -   In java we dont have Access Specifiers like CPP instead we use Access Modifiers.
    -   Abstract,Private,Protected,Public,Final

    -   Only Abstract,Final,Public can be used with the classes.

    -   Private,Protected can not be used with the classes.
    -   Only in case of Inner class we can use Private.

    -   Default class
        class A{

        }
    -   These ðŸ‘†ðŸ‘† class can be accessed only inside a same Package.

    -   Modifiers specified class
        public class A{

        }

    -   To Access class outside a package we must specify that class as 'public'

    -   We can also make Variable amd Methods as public,private,protected.
    -   By default it is a default it means we can not access outside the package to do that 
        we use 'public'.

    -   Private: Specific class
    -   Default: Specific Package
    -   Public: Any class or Package
    -   Protected: Subsiding class
            same package;
            public class A{
                protected int i;
            }

            class B extends A{
                System.out.println(i);
                // i can be used here
            }

    -	Default is also called package private.   

55. Exception Handling - try catch finally blocks
    -   Unchecked Exception
        int i = 9/0; //It will give us the error while running the program.
    
    -   So in order to handle these Exceptions we use try-catch block.

    -   We write a Critical Statement inside a try block.
    -   We catch a object of Exception thrown by try block inside a catch block.

    -   try{
            int i = 9/0; //critical Statement
        }
        catch(Exception e){
            System.out.println("Error occured");
        }

    -   Specifically above code will throw ArithmeticException.

    -   ArithmeticException --> RuntimeException --> Exception

    -   Even if you get the error or not in try catch block but you want to execute a statement always.

    -   finally{ } block will always execute

56. Exception Handling - Multiple Catch Blocks
    -   catch (ArithmeticException e) {
            System.err.println("Error");
        } catch (ArrayIndexOutOfBoundsException e) {
            System.err.println("Error");
        }

        EQUIVALENT

        catch(ArithmeticException | ArrayIndexOutOfBoundsException e ) {
            System.err.println("Error");
        }
        ðŸ‘†ðŸ‘†These is valid from java 1.7 and Later

    -   Suppose you dont know specific Exception then you can just 
        TheseðŸ‘‡ðŸ‘‡ catch block must write at the end
        
        catch(Exception e){
            System.out.println("These is the parent Exception");
        }

    -   All Exception extends Exception.

57. Exception Handling
    Checked Exception | Finally block

    -   When compiler knows about Exception it is called Checked Exception.

    -   When compiler dont prompt you about error it is called Unchecked Exception.

    -   IOException is not a type of run time Exception.
    
    -   Only run time exception subclasses are unchecked exception
        remaining all are Checked Exception.

    -   Here 'br' BufferedReader is a resource.

    -   Any classes which comes from IO package is called resource.
    
    -   Whenever we use resources we must close it in 'finally' block.
   